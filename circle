#!/bin/bash

# INPUT: Inbound traffic destined for this host
# OUTPUT: Outbound traffic originating from this host
# FORWARD: Traffic passing through this host (both other origin and destination)

set -o errexit
set -o pipefail
set -o nounset

VERSION="1.1.2"

bname="$(basename ${BASH_SOURCE[0]})"

CONFD="/etc/circle.d"
CEXCL="chains.exclude"

ipt4_bin="/sbin/iptables"
ipt6_bin="null"
ebt_bin="null"

ipt4_opts="-w"
ipt6_opts="-w"
ebt_opts=""

ipt4="${ipt4_bin} ${ipt4_opts}"

true_policy=false
in_policy="DROP"
out_policy="DROP"
forward_policy="DROP"

use_ebt=false
use_ipt6=false

verbose=false
silent=false
log_illegal=false
log_level=4

ipt4_lines=()
ipt6_lines=()
ebt_lines=()


null(){ :; }
count_args () { echo "$#"; }

log()
{
    if [ ${1} -le "${log_level}" ]
    then
        logger -t circle "${2}"
    fi
}

debug(){ log 6 "DEBUG: ${1}"; }
note(){ log 5 "NOTICE: ${1}"; }
info(){ log 4 "INFO: ${1}"; }
warn(){ log 3 "WARNING: ${1}"; }
err(){ log 2 "ERROR: ${1}"; }

display_help()
{
    echo "Usage: ${bname} [options] <command>"
    echo ""
    echo "    -6        Enable ip6tables"
    echo "    -e        Enable ebtables"
    echo "    -i        Log illegal lines in source files"
    echo "    -l INT    Log level (2-6), default 4 (0 to disable)"
    echo "    -V        Be verbose"
    echo "    -s        Be silent"
    echo "    -I STR    Set INPUT chain policy"
    echo "    -F STR    Set FORWARD chain policy"
    echo "    -O STR    Set OUTPUT chain policy"
    echo "    -P        Use true policy instead of pseudo-policy"
    echo "    -h        Show this help message and exit"
    echo "    -v        Show version and exit"
    echo ""
    echo "Commands:"
    echo "    compile   compile and print rules"
    echo "    start     clear and load firewall rules"
    echo "    stop      clear rules"
    echo "    restart   alias for 'start'"
}

display_version()
{
    echo "${bname} v${VERSION}"
}

sanity()
{
    # Must be root
    if [ "${EUID}" -ne 0 ]
    then
        [ ${silent} = false ] && echo "${bname} requires root privileges, exiting" >&2
        err "${bname} requires root privileges, aborting"
        exit 1
    fi

    # Make sure conf.d directory exists
    if [ ! -d "${CONFD}" ]
    then
        [ ${silent} = false ] && echo "Configuration directory '${CONFD}' does not exist" >&2
        err "Configuration directory '${CONFD}' does not exist"
        exit 1
    fi

    # Make sure iptables and ebtables are present
    if [ ! -f "${ipt4_bin}" ]
    then
        [ ${silent} = false ] && echo "${ipt4_bin} missing" >&2
        err "${ipt4_bin} missing"
        exit 1
    elif [ ${use_ipt6} = true ] && [ ! -f "${ipt6_bin}" ]
    then
        [ ${silent} = false ] && echo "${ipt6_bin} missing" >&2
        err "${ipt6_bin} missing"
        exit 1
    elif [ ${use_ebt} = true ] && [ ! -f "${ebt_bin}" ]
    then
        [ ${silent} = false ] && echo "${ebt_bin} missing" >&2
        err "${ebt_bin} missing"
        exit 1
    fi
}

contains()
{
    local needle=${1}
    declare -a haystack=("${!2}")

    for item in ${haystack[@]}
    do
        if [ "${needle}" = "${item}" ]
        then
            return 0
        fi
    done
    return 1
}

valid_policy()
{
    local policy=${1}
    local valid=("ACCEPT" "DROP" "REJECT" "QUEUE")
    return $(contains ${policy} valid[@])
}

clear_chains()
{
    local chains=()
    if [ ${1} = "ipt4" ]
    then
        chains=$(${ipt4} -nL|grep Chain|awk '{print $2}')
        local tool=${ipt4}
    elif [ ${1} = "ipt6" ]
    then
        chains=$(${ipt6} -nL|grep Chain|awk '{print $2}')
        local tool=${ipt6}
    else
        [ ${silent} = false ] && echo "clear_chains() cannot handle '${1}'" >&2
        err "clear_chains() cannot handle '${1}'"
        exit 1
    fi

    local exclude=()
    if [ -f "${CONFD}/${1}-${CEXCL}" ]
    then
        readarray -t exclude < "${CONFD}/${1}-${CEXCL}"
    fi

    # Can't delete built-in chains, but always flush
    standard=("INPUT" "OUTPUT" "FORWARD")
    exclude+=("INPUT")
    exclude+=("OUTPUT")
    exclude+=("FORWARD")
    ${tool} -F INPUT
    ${tool} -F OUTPUT
    ${tool} -F FORWARD

    ${tool} -t nat -F PREROUTING
    ${tool} -t nat -F INPUT
    ${tool} -t nat -F OUTPUT
    ${tool} -t nat -F POSTROUTING
    ${tool} -t mangle -F PREROUTING
    ${tool} -t mangle -F INPUT
    ${tool} -t mangle -F OUTPUT
    ${tool} -t mangle -F FORWARD
    ${tool} -t mangle -F POSTROUTING

    for chain in ${chains[@]}
    do
        if contains ${chain} exclude[@]
        then
            if ! contains ${chain} standard[@]
            then
                [ ${verbose} = true -a ${silent} = false ] && echo "Excluding chain '${chain}'"
                info "Excluding chain '${chain}'"
            fi
            continue
        fi
        [ ${verbose} = true -a ${silent} = false ] && echo "Deleting chain '${chain}'"
        debug "Flushing ${chain}"
        ${tool} -F ${chain}
        debug "Deleting ${chain}"
        ${tool} -X ${chain}
    done
}

# Remove all rules and chains
remove_all()
{
    [ ${verbose} = true -a ${silent} = false ] && echo "Removing previous firewall rules.."
    info "Removing firewall rules"
    # IPv4
    clear_chains "ipt4"

    # IPv6
    if [ ${use_ipt6} = true ]
    then
        clear_chains "ipt6"
    fi
}

display_rules()
{
    if [ ! $(count_args ${ipt4_lines[@]+"${ipt4_lines[@]}"}) = 0 ]
    then
        echo "# iptables"
        for item in "${ipt4_lines[@]}" ; do echo "${item}" ; done
        echo ""
    fi

    if [ ! $(count_args ${ipt6_lines[@]+"${ipt6_lines[@]}"}) = 0 ]
    then
        echo "# ip6tables"
        for item in "${ipt6_lines[@]}" ; do echo "${item}" ; done
        echo ""
    fi

    if [ ! $(count_args ${ebt_lines[@]+"${ebt_lines[@]}"}) = 0 ]
    then
        echo "# ebtables"
        for item in "${ebt_lines[@]}" ; do echo "${item}" ; done
        echo ""
    fi
}

compile()
{
    local output=true

    if [ ${#} -gt 0 ]
    then
        if [ ${1} = false ]
        then
            output=false
        fi
    fi

    if [ $true_policy = true ]
    then
        ipt4_lines+=("\${ipt4} -P INPUT ${in_policy}")
        ipt4_lines+=("\${ipt4} -P OUTPUT ${out_policy}")
        ipt4_lines+=("\${ipt4} -P FORWARD ${forward_policy}")

        ipt6_lines+=("\${ipt6} -P INPUT ${in_policy}")
        ipt6_lines+=("\${ipt6} -P OUTPUT ${out_policy}")
        ipt6_lines+=("\${ipt6} -P FORWARD ${forward_policy}")
    else
        ipt4_lines+=("\${ipt4} -P INPUT ACCEPT")
        ipt4_lines+=("\${ipt4} -P OUTPUT ACCEPT")
        ipt4_lines+=("\${ipt4} -P FORWARD ACCEPT")

        ipt6_lines+=("\${ipt6} -P INPUT ACCEPT")
        ipt6_lines+=("\${ipt6} -P OUTPUT ACCEPT")
        ipt6_lines+=("\${ipt6} -P FORWARD ACCEPT")
    fi

    for file in ${CONFD}/*.rules
    do
        if [ -f "${file}" ]
        then
            [ ${verbose} = true -a ${silent} = false ] && echo "Parsing rule file '${file}'"
            note "Parsing rule file '${file}'"

            # Check for illegal characters
            if grep -qEe '.*;.*' -Ee '\$\(.*\)' -Ee '([&]|[|])' -Ee '[\`]' ${file}
            then
                [ ${verbose} = true -a ${silent} = false ] && echo "Illegal characters detected in file."
                warn "Illegal characters detected in file '${file}'"
            fi

            if [ ${log_illegal} = true ]
            then
                # Log illegal lines
                while read -r line
                do
                    warn "Illegal characters detected in line '${line}'"
                done < <(grep -Ee '.*;.*' -Ee '\$\(.*\)' -Ee '([&]|[|])' -Ee '[\`]' ${file})
            fi

            # Extract lines that seem to be legal
            while read -r line
            do
                debug "Extracting line '${line}'"
                case $(echo ${line}|awk '{print $1}') in
                    '${ipt4}')
                        ipt4_lines+=("${line}")
                        ;;
                    '${ipt6}')
                        ipt6_lines+=("${line}")
                        ;;
                    '${ebt}')
                        local ebt_lines=("${ebt_lines[@]-}" "${line}")
                        ;;
                esac
            done < <(grep -e "^\${" ${file}|grep -vEe ".*;.*" -vEe "\$\(.*\)" -vEe "([&]|[|])" -vEe "[\`]")
        fi
    done

    # Set pseudo-policies
    if [ $true_policy = false ]
    then
        ipt4_lines+=("\${ipt4} -A INPUT -j ${in_policy}")
        ipt4_lines+=("\${ipt4} -A OUTPUT -j ${out_policy}")
        ipt4_lines+=("\${ipt4} -A FORWARD -j ${forward_policy}")

        ipt6_lines+=("\${ipt6} -A INPUT -j ${in_policy}")
        ipt6_lines+=("\${ipt6} -A OUTPUT -j ${out_policy}")
        ipt6_lines+=("\${ipt6} -A FORWARD -j ${forward_policy}")
    fi

    if [ ${output} = true ]
    then
        display_rules
    fi
}

load_rules()
{
    if [ ! $(count_args ${ipt4_lines[@]+"${ipt4_lines[@]}"}) = 0 ]
    then
        echo "Loading iptables rules"
        note "Loading iptables rules"
        for item in "${ipt4_lines[@]}" ; do eval "${item}" ; done
    fi

    if [ ! $(count_args ${ipt6_lines[@]+"${ipt6_lines[@]}"}) = 0 -a ! ${use_ipt6} = false ]
    then
        echo "Loading ip6tables rules"
        note "Loading ip6tables rules"
        for item in "${ipt6_lines[@]}" ; do eval "${item}" ; done
    fi

    if [ ! $(count_args ${ebt_lines[@]+"${ebt_lines[@]}"}) = 0 -a ! ${use_ebt} = false ]
    then
        echo "Loading ebtables rules"
        note "Loading ebtables rules"
        for item in "${ebt_lines[@]}" ; do eval "${item}" ; done
    fi
}

start()
{
    sanity

    # Remove any previous rules or chains
    remove_all

    # Compile rules without output
    compile false

    [ ${verbose} = true -a ${silent} = false ] && echo "Setting up firewall.."
    info "Setting up firewall"

    # Load all rules
    load_rules

    [ ${verbose} = true -a ${silent} = false ] && echo "Finished loading rules"
    info "Finished loading rules"
}

# getopt index variable
OPTIND=1
while getopts ":6eil:VsI:F:O:Phv" opt; do
    case ${opt} in
        6)
            use_ipt6=true
            ipt6_bin="/sbin/ip6tables"
            ipt6="${ipt6_bin} ${ipt6_opts}"
            ;;
        e)
            use_ebt=true
            ebt_bin="/sbin/ebtables"
            ebt="${ebt_bin} ${ebt_opts}"
            ;;
        i)
            log_illegal=true
            ;;
        l)
            valid_levels=(0 2 3 4 5 6)
            if ! contains "${OPTARG}" valid_levels[@]
            then
               echo "Invalid log level '${OPTARG}', available 0, 2-6" >&2
               err "Invalid log level '${OPTARG}', available 0, 2-6"
               exit 1
            fi
            log_level=${OPTARG}

            ;;
        V)
            verbose=true
            ;;
        s)
            silent=true
            ;;
        I)
            if ! valid_policy "${OPTARG}"
            then
                echo "Invalid policy '${OPTARG}'" >&2
                err "Invalid policy '${OPTARG}'"
                exit 1
            fi
            in_policy=${OPTARG}
            ;;
        F)
            if ! valid_policy "${OPTARG}"
            then
                echo "Invalid policy '${OPTARG}'" >&2
                err "Invalid policy '${OPTARG}'"
                exit 1
            fi
            forward_policy=${OPTARG}
            ;;
        O)
            if ! valid_policy "${OPTARG}"
            then
                echo "Invalid policy '${OPTARG}'" >&2
                err "Invalid policy '${OPTARG}'"
                exit 1
            fi
            out_policy=${OPTARG}
            ;;
        P)
            true_policy=true
            ;;
        h)
            display_help
            exit 0
            ;;
        v)
            display_version
            exit 0
            ;;
        \?)
            echo "Invalid option: -${OPTARG}" >&2
            err "Invalid option: -${OPTARG}"
            display_help
            exit 1
            ;;
        :)
            echo "Option -${OPTARG} requires an argument" >&2
            err "Option -${OPTARG} requires an argument"
            display_help
            exit 1
            ;;
    esac
done

# Remove all option arguments
shift $(($OPTIND - 1))

if [ ${#} = 0 ]
then
    err "No command specified"
    display_help
    exit 1
fi

case "${1}" in
    compile)
        compile
        ;;
    start)
        start
        ;;
    stop)
        remove_all
        ;;
    restart)
        start
        ;;
    *)
        err "Unknown command '${1}'"
        display_help
        exit 1
        ;;
esac

